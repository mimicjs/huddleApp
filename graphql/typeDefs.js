"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_express_1 = require("apollo-server-express");
exports.typeDefs = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n\n    interface IMessage{\n        _id: ID\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        emotePreviews: [EmotePreview]\n    }\n    type Post implements IMessage{\n        _id: ID\n        parent: String\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        commentsCount: Int\n        emotePreviews: [EmotePreview]\n        emotePreviewsCount: Int\n    }\n    type Comment implements IMessage{\n        _id: ID\n        parent: String\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        commentsCount: Int\n        emotePreviews: [EmotePreview]\n        emotePreviewsCount: Int\n    }\n    type Emote{\n        _id: ID\n        parent: String\n        createdAt: String\n        user: User\n        emoticon: String\n    }\n    type EmotePreview{\n        emote: Emote\n        user: ID\n    }\n    interface IUser{\n        _id: ID\n        email: String\n        username: String\n        userFullName: String\n        password: String\n        createdAt: String\n    }\n    type User implements IUser{\n        _id: ID\n        email: String\n        username: String\n        userFullName: String\n        password: String\n        createdAt: String\n    }\n    type GetAccess_Response{\n        status: String\n        userID: String\n        userFullName: String\n    }\n    type Status_Result{ \n        status: String\n    }\n    type Response_EmotePostOrComment{ \n        status: String\n        emote: Emote\n    }\n    input RegisterInput{ #Should inherit IMessage. Input type does not allow inheritance\n        _id: ID\n        email: String!\n        username: String!\n        userFullName: String!\n        password: String!\n        createdAt: String\n    }\n    type Query{\n#TODO: Future: User can access many Servers (approval list and server hierarchy for approval and moderation) \n#      Store new Server DBSchema, Store Server._id onto User & on Login fetch list with names to allow User to select to access\n#      Collection of Channels to hold collection of IDs each\n#TODO: Future: Perhaps a Marketplace or eCommerce\n        getPosts: [Post]\n        getPostOrComment(postID: String, commentID: String): Post\n        getAccess: GetAccess_Response\n        getLogout: Status_Result\n    }\n    type Mutation{\n        login(username: String!, password: String!): Status_Result\n        register(registerInput: RegisterInput!): Status_Result\n        createPost(parentID: String, body: String!): Status_Result\n        createPostGuest(parentID: String, body: String!): Status_Result\n        createComment(postID: String, commentID: String, commentBody: String!): Status_Result\n        emotePostOrComment(postID: String, commentID: String, emoteID: String, emoticon: String!): Response_EmotePostOrComment\n        deletePostOrComment(postID: String, commentID: String): Status_Result #Reason why 'PostOrComment' has Posts and Comments behave in a similar way\n    }\n    #Subscription via e.g. Websocket maybe something faster?\n    #FIXME: https://graphql.org/learn/best-practices/\n    type Subscription{\n        newPost: Post\n    }\n"], ["\n\n    interface IMessage{\n        _id: ID\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        emotePreviews: [EmotePreview]\n    }\n    type Post implements IMessage{\n        _id: ID\n        parent: String\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        commentsCount: Int\n        emotePreviews: [EmotePreview]\n        emotePreviewsCount: Int\n    }\n    type Comment implements IMessage{\n        _id: ID\n        parent: String\n        body: String\n        user: User\n        createdAt: String\n        comments: [Comment]\n        commentsCount: Int\n        emotePreviews: [EmotePreview]\n        emotePreviewsCount: Int\n    }\n    type Emote{\n        _id: ID\n        parent: String\n        createdAt: String\n        user: User\n        emoticon: String\n    }\n    type EmotePreview{\n        emote: Emote\n        user: ID\n    }\n    interface IUser{\n        _id: ID\n        email: String\n        username: String\n        userFullName: String\n        password: String\n        createdAt: String\n    }\n    type User implements IUser{\n        _id: ID\n        email: String\n        username: String\n        userFullName: String\n        password: String\n        createdAt: String\n    }\n    type GetAccess_Response{\n        status: String\n        userID: String\n        userFullName: String\n    }\n    type Status_Result{ \n        status: String\n    }\n    type Response_EmotePostOrComment{ \n        status: String\n        emote: Emote\n    }\n    input RegisterInput{ #Should inherit IMessage. Input type does not allow inheritance\n        _id: ID\n        email: String!\n        username: String!\n        userFullName: String!\n        password: String!\n        createdAt: String\n    }\n    type Query{\n#TODO: Future: User can access many Servers (approval list and server hierarchy for approval and moderation) \n#      Store new Server DBSchema, Store Server._id onto User & on Login fetch list with names to allow User to select to access\n#      Collection of Channels to hold collection of IDs each\n#TODO: Future: Perhaps a Marketplace or eCommerce\n        getPosts: [Post]\n        getPostOrComment(postID: String, commentID: String): Post\n        getAccess: GetAccess_Response\n        getLogout: Status_Result\n    }\n    type Mutation{\n        login(username: String!, password: String!): Status_Result\n        register(registerInput: RegisterInput!): Status_Result\n        createPost(parentID: String, body: String!): Status_Result\n        createPostGuest(parentID: String, body: String!): Status_Result\n        createComment(postID: String, commentID: String, commentBody: String!): Status_Result\n        emotePostOrComment(postID: String, commentID: String, emoteID: String, emoticon: String!): Response_EmotePostOrComment\n        deletePostOrComment(postID: String, commentID: String): Status_Result #Reason why 'PostOrComment' has Posts and Comments behave in a similar way\n    }\n    #Subscription via e.g. Websocket maybe something faster?\n    #FIXME: https://graphql.org/learn/best-practices/\n    type Subscription{\n        newPost: Post\n    }\n"])));
var templateObject_1;
